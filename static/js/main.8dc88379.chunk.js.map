{"version":3,"sources":["App.scss","components/Header.jsx","components/Search.jsx","components/Example.jsx","components/FontSize.jsx","components/ColorMode.jsx","components/Nav.jsx","config.js","components/Card.jsx","components/Main.jsx","App.jsx","serviceWorker.js","index.jsx","css/_global.scss"],"names":["module","exports","Header","props","darkMode","className","concat","style","fontWeight","fontSize","type","href","defaultProps","Search","query","handleChange","handleDelete","buttonStyle","visibility","trim","id","placeholder","autoComplete","value","onChange","onClick","Example","example","FontSize","handleMenuClick","showMenu","state","setState","handleOptionClick","this","menuStyle","boxShadow","caratStyle","transform","menuButtonStyle","cond","backgroundColor","styles","paleAccent","color","brightAccent","options","map","size","key","e","min","max","Component","ColorMode","name","dark","mode","currentMode","Nav","majorNav","React","createRef","setNavTop","current","getBoundingClientRect","top","grid","resetDisabled","navFull","changeSearch","deleteQuery","changeExample","changeFontSize","changeMode","toggleLayout","reset","textColor","navStyle","width","marginLeft","marginRight","padding","position","borderTop","borderBottom","ref","border","disabled","config","KEY","DEFAULT_TEXT","Card","updateText","text","innerTrimmed","split","join","displayed","prevProps","numStyles","textStyle","fontFamily","lighterGray","contentEditable","suppressContentEditableWarning","textArea","Main","rendering","fonts","axios","get","then","res","data","items","forEach","font","formattedName","family","replace","defaultVariant","variants","includes","link","document","createElement","rel","head","appendChild","catch","filtered","filter","toLowerCase","fontCards","fontKey","cardComponent","length","mainDisplay","DEFAULTS","search","exampleText","App","handleScroll","navTop","target","documentElement","scrollTop","body","handleChangeSearch","input","window","scrollTo","handleChangeExample","handleChangeFontSize","newSize","handleChangeMode","classList","add","remove","handleToggleLayout","handleReset","handleToTop","addEventListener","removeEventListener","Object","keys","majorNavRef","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8dc88379.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"#222\",\"lighterGray\":\"#b8b8b8\",\"brightAccent\":\"#ff5252\",\"paleAccent\":\"rgba(255,82,82,0.16)\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Implement minor header\nfunction Header(props) {\n  const { darkMode } = props;\n  return (\n    <div className={'minor-nav'.concat(darkMode ? ' dm-white' : '')}>\n      <div>\n        <span style={{ fontWeight: 500, fontSize: '1.45em' }}>Google</span>\n        <span>Fonts</span>\n      </div>\n      <ul>\n        <li>\n          <button type=\"button\" href=\"#\">CATALOG</button>\n        </li>\n        <li>\n          <button type=\"button\" href=\"#\">FEATURED</button>\n        </li>\n        <li>\n          <button type=\"button\" href=\"#\">ARTICLES</button>\n        </li>\n        <li>\n          <button type=\"button\" href=\"#\">ABOUT</button>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nHeader.defaultProps = {\n  darkMode: false,\n};\n\nHeader.propTypes = {\n  darkMode: PropTypes.bool,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Implement search bar\nfunction Search(props) {\n  const {\n    query, darkMode, handleChange, handleDelete,\n  } = props;\n  const buttonStyle = { visibility: (query.trim()) ? 'visible' : 'hidden' };\n  return (\n    <li className=\"search\">\n      <i className=\"fas fa-search\" />\n      <input className={darkMode ? 'dm-white' : ''} id=\"search\" type=\"text\" placeholder=\"Search fonts\" autoComplete=\"off\" value={query} onChange={handleChange} />\n      <button id=\"reset-query\" className={'icon-btn'.concat(darkMode ? ' dm-white' : '')} type=\"button\" style={buttonStyle} onClick={handleDelete}>\n        <i className=\"fas fa-times\" />\n      </button>\n    </li>\n  );\n}\n\n// Set defaults\nSearch.defaultProps = {\n  query: '',\n  darkMode: false,\n  handleChange: () => {},\n  handleDelete: () => {},\n};\n\n// Define propTypes\nSearch.propTypes = {\n  query: PropTypes.string,\n  darkMode: PropTypes.bool,\n  handleChange: PropTypes.func,\n  handleDelete: PropTypes.func,\n};\n\nexport default Search;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Implement example text box\nfunction Example(props) {\n  const { example, darkMode, handleChange } = props;\n  return (\n    <li className=\"example\">\n      <input id=\"exampleBox\" className={darkMode ? 'dm-white' : ''} type=\"text\" placeholder=\"Type something\" onChange={handleChange} value={example} />\n    </li>\n  );\n}\n\n// Set defaults\nExample.defaultProps = {\n  example: '',\n  darkMode: false,\n  handleChange: () => {},\n};\n\n// Define propTypes\nExample.propTypes = {\n  example: PropTypes.string,\n  darkMode: PropTypes.bool,\n  handleChange: PropTypes.func,\n};\n\nexport default Example;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../css/_global.scss';\n\n// Implement font size controls\nclass FontSize extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showMenu: false,\n    };\n  }\n\n  // Show font sizes menu when font size display is clicked\n  handleMenuClick = () => {\n    const { showMenu } = this.state;\n    this.setState({\n      showMenu: !showMenu,\n    });\n  }\n\n  handleOptionClick = () => {\n    this.setState({\n      showMenu: false,\n    });\n  }\n\n  render() {\n    const { fontSize, darkMode, handleChange } = this.props;\n    const { showMenu } = this.state;\n    const menuStyle = { visibility: showMenu ? 'visible' : 'hidden', boxShadow: darkMode ? 'none' : '' };\n    const caratStyle = { transform: showMenu ? 'rotate(180deg)' : '' };\n    const menuButtonStyle = (cond) => ({\n      backgroundColor: cond ? styles.paleAccent : '',\n      color: cond ? styles.brightAccent : '',\n    });\n    const defaultSizes = ['8', '12', '14', '20', '24', '32', '40', '64', '96', '120', '184', '280'];\n    const options = defaultSizes.map((size) => (\n      <li key={size}>\n        <button\n          type=\"button\"\n          onClick={(e) => { handleChange(e, size); this.handleOptionClick(e); }}\n          style={menuButtonStyle(size === fontSize)}\n        >\n          <span style={{ fontWeight: '600' }}>{size}</span>\n        </button>\n      </li>\n    ));\n    return (\n      <li className=\"font-size\">\n        <div>\n          <button id=\"fontSize\" className={darkMode ? ' dm-white' : ''} type=\"button\" style={menuButtonStyle(showMenu)} onClick={this.handleMenuClick}>\n            <span id=\"currentSize\" style={{ fontWeight: 600 }}>{`${fontSize}px`}</span>\n            <i className=\"fas fa-caret-down\" style={caratStyle} />\n          </button>\n          <div id=\"sizeMenu\" className=\"options-container dropdown\" style={menuStyle}>\n            <ul className=\"size-options\">\n              {options}\n            </ul>\n          </div>\n        </div>\n        <input id=\"slider\" type=\"range\" min=\"8\" max=\"300\" value={fontSize} onChange={(e) => handleChange(e, '')} />\n      </li>\n    );\n  }\n}\n\n// Set defaults\nFontSize.defaultProps = {\n  fontSize: '40',\n  darkMode: false,\n  handleChange: () => {},\n};\n\n// Define propTypes\nFontSize.propTypes = {\n  fontSize: PropTypes.string,\n  darkMode: PropTypes.bool,\n  handleChange: PropTypes.func,\n};\n\nexport default FontSize;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../css/_global.scss';\n\n// Implement light/dark mode controls\nclass ColorMode extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showMenu: false,\n    };\n  }\n\n  // Show font sizes menu when font size display is clicked\n  handleMenuClick = () => {\n    const { showMenu } = this.state;\n    this.setState({\n      showMenu: !showMenu,\n    });\n  }\n\n  handleOptionClick = () => {\n    this.setState({\n      showMenu: false,\n    });\n  }\n\n  render() {\n    const { darkMode, handleChange } = this.props;\n    const { showMenu } = this.state;\n    const menuStyle = { visibility: showMenu ? 'visible' : 'hidden' };\n    const modes = [{ name: 'dark', color: styles.dark }, { name: 'light', color: 'rgb(255,255,255)' }];\n    const options = modes.map((mode) => {\n      const currentMode = darkMode ? 'dark' : 'light';\n      return (\n        <li key={mode.name}>\n          <button\n            type=\"button\"\n            onClick={(e) => { handleChange(e, mode.name); this.handleOptionClick(e); }}\n            style={{ backgroundColor: mode.color }}\n          >\n            <i className=\"fas fa-check-circle icon-circle\" style={{ visibility: currentMode === mode.name && showMenu ? 'visible' : 'hidden' }} />\n          </button>\n        </li>\n      );\n    });\n    return (\n      <li className=\"color-mode\">\n        <button className={'icon-btn'.concat(darkMode ? ' dm-white' : '')} id=\"colorMode\" type=\"button\" onClick={this.handleMenuClick}>\n          <i className=\"fas fa-fill-drip\" />\n        </button>\n        <ul className=\"dropdown\" style={menuStyle}>\n          {options}\n        </ul>\n      </li>\n    );\n  }\n}\n\n// Set defaults\nColorMode.defaultProps = {\n  darkMode: false,\n  handleChange: () => {},\n};\n\n// Define propTypes\nColorMode.propTypes = {\n  darkMode: PropTypes.bool,\n  handleChange: PropTypes.func,\n};\n\nexport default ColorMode;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Search from './Search';\nimport Example from './Example';\nimport FontSize from './FontSize';\nimport ColorMode from './ColorMode';\nimport styles from '../css/_global.scss';\n\n// Implement major header\nclass Nav extends Component {\n  constructor(props) {\n    super(props);\n    this.majorNav = React.createRef();\n  }\n\n  // Find the top of the nav bar for scrolling effects\n  componentDidMount() {\n    const { setNavTop } = this.props;\n    setNavTop(this.majorNav.current.getBoundingClientRect().top);\n  }\n\n  render() {\n    const {\n      query, example, fontSize, darkMode, grid, resetDisabled, navFull, changeSearch, deleteQuery,\n      changeExample, changeFontSize, changeMode, toggleLayout, reset,\n    } = this.props;\n    const textColor = darkMode ? 'white' : '';\n    const navStyle = navFull ? {\n      color: textColor, backgroundColor: darkMode ? styles.dark : 'white', width: '100%', marginLeft: '0', marginRight: '0', padding: '0 60px', position: 'fixed', top: '0', borderTop: '1px solid lightgray', borderBottom: '1px solid lightgray', boxShadow: darkMode ? '' : '1px 1px 8px lightgray',\n    } : { color: textColor };\n    return (\n      <nav ref={this.majorNav} style={navStyle}>\n        <ul style={{ border: navFull ? 'none' : '' }}>\n          <Search\n            query={query}\n            darkMode={darkMode}\n            handleDelete={deleteQuery}\n            handleChange={changeSearch}\n          />\n          <Example example={example} darkMode={darkMode} handleChange={changeExample} />\n          <FontSize fontSize={fontSize} darkMode={darkMode} handleChange={changeFontSize} />\n          <ColorMode darkMode={darkMode} handleChange={changeMode} />\n          <li className=\"view\">\n            <button className={'icon-btn'.concat(darkMode ? ' dm-white' : '')} type=\"button\" onClick={toggleLayout}>\n              <i className={'fas '.concat(grid ? 'fa-list-alt' : 'fa-th')} />\n            </button>\n          </li>\n          <li className=\"reset\">\n            <button className={'icon-btn'.concat(darkMode ? ' dm-white' : '')} type=\"button\" onClick={reset} disabled={resetDisabled}>\n              <i className=\"fas fa-redo-alt\" />\n            </button>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\n\n// Set defaults\nNav.defaultProps = {\n  query: '',\n  example: '',\n  fontSize: '40',\n  darkMode: false,\n  grid: true,\n  resetDisabled: true,\n  navFull: false,\n  setNavTop: () => {},\n  changeSearch: () => {},\n  deleteQuery: () => {},\n  changeExample: () => {},\n  changeFontSize: () => {},\n  changeMode: () => {},\n  toggleLayout: () => {},\n  reset: () => {},\n};\n\n// Define propTypes\nNav.propTypes = {\n  query: PropTypes.string,\n  example: PropTypes.string,\n  fontSize: PropTypes.string,\n  darkMode: PropTypes.bool,\n  grid: PropTypes.bool,\n  resetDisabled: PropTypes.bool,\n  navFull: PropTypes.bool,\n  setNavTop: PropTypes.func,\n  changeSearch: PropTypes.func,\n  deleteQuery: PropTypes.func,\n  changeExample: PropTypes.func,\n  changeFontSize: PropTypes.func,\n  changeMode: PropTypes.func,\n  toggleLayout: PropTypes.func,\n  reset: PropTypes.func,\n};\n\nexport default Nav;\n","const config = {\n  KEY: 'AIzaSyACV13V4GEhdIurbJX6yalQ2n1pF2SVH3Y',\n};\n\nexport default config;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../css/_global.scss';\n\nconst DEFAULT_TEXT = 'Then came the night of the first falling star.';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayed: DEFAULT_TEXT,\n    };\n  }\n\n  // If component is lazy-loaded and user has typed in the \"Type something box\",\n  // display this text instead of default\n  componentDidMount() {\n    const { text } = this.props;\n    if (text !== DEFAULT_TEXT) {\n      this.updateText(text);\n    }\n  }\n\n  // If user has typed in the \"Type something box\", display this text on the card\n  componentDidUpdate(prevProps) {\n    const { text } = this.props;\n    if (text !== prevProps.text) {\n      this.updateText(text);\n    }\n  }\n\n  // Update displayed text\n  updateText = (text) => {\n    const innerTrimmed = text.split(/\\s+/).join(' ');\n    this.setState({\n      displayed: innerTrimmed || DEFAULT_TEXT,\n    });\n  }\n\n  render() {\n    const {\n      name, size, darkMode, numStyles,\n    } = this.props;\n    const { displayed } = this.state;\n    const textStyle = {\n      fontSize: `${size}px`,\n      fontFamily: `${name}, sans-serif`,\n    };\n    return (\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div>\n            <span className=\"font-name\">{name}</span>\n            <span className=\"num-styles\" style={{ color: darkMode ? styles.lighterGray : '' }}>\n              {numStyles}\n              {' '}\n  styles\n            </span>\n          </div>\n          <button type=\"button\">\n            <i className=\"fas fa-plus-circle icon-circle\" />\n          </button>\n        </div>\n        <div id=\"cardText\" className=\"text-container\" contentEditable=\"true\" suppressContentEditableWarning style={textStyle} ref={this.textArea}>{displayed}</div>\n      </div>\n    );\n  }\n}\n\nCard.defaultProps = {\n  name: '',\n  text: '',\n  size: '40',\n  darkMode: false,\n  numStyles: 0,\n};\n\nCard.propTypes = {\n  name: PropTypes.string,\n  text: PropTypes.string,\n  size: PropTypes.string,\n  darkMode: PropTypes.bool,\n  numStyles: PropTypes.number,\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LazyLoad from 'react-lazyload';\nimport axios from 'axios';\nimport config from '../config';\nimport Card from './Card';\n\n// Implement stateful App component\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rendering: true,\n      fonts: [],\n    };\n  }\n\n  // Fetch font information\n  componentDidMount() {\n    return axios.get(`https://www.googleapis.com/webfonts/v1/webfonts?key=${config.KEY}&sort=popularity`)\n      .then((res) => {\n        const fonts = res.data.items;\n        // Import fonts into index.html\n        fonts.forEach((font) => {\n          const formattedName = font.family.replace(/\\s+/g, '+');\n          const defaultVariant = (font.variants.includes('regular')) ? '' : `:${font.variants[0]}`;\n          const link = document.createElement('link');\n          link.rel = 'stylesheet';\n          link.href = `https://fonts.googleapis.com/css?family=${formattedName}${defaultVariant}&display=swap`;\n          document.head.appendChild(link);\n        });\n        // Store font information\n        this.setState({\n          rendering: false,\n          fonts,\n        });\n      })\n      .catch(() => {\n      });\n  }\n\n  render() {\n    const { rendering, fonts } = this.state;\n    const {\n      query, example, fontSize, darkMode, grid,\n    } = this.props;\n    // Filter font list based on search query\n    const filtered = fonts\n      .filter((font) => font.family.toLowerCase().includes(query.toLowerCase()));\n    const fontCards = filtered.map((font) => {\n      const fontKey = font.family.replace(/\\s+/g, '-').toLowerCase();\n      const cardComponent = (\n        <Card\n          key={fontKey}\n          name={font.family}\n          text={example}\n          size={fontSize}\n          darkMode={darkMode}\n          numStyles={font.variants.length}\n        />\n      );\n        // Lazy load font cards to boost performance when 30 or more cards are present\n      return (filtered.length <= 50) ? cardComponent\n        : <LazyLoad key={fontKey} placeholder={<div />}>{cardComponent}</LazyLoad>;\n    });\n    // Display font cards or, if none match the search query, a \"No results\" page\n    const mainDisplay = rendering\n      ? (\n        <div className=\"loading-screen\">\n          <p>Loading fonts...</p>\n          <i className=\"fas fa-spinner fa-pulse\" />\n        </div>\n      ) : fontCards.length ? fontCards : (\n        <div className=\"no-results\" style={{ color: darkMode ? 'white' : '' }}>\n          <span>{'(>_<)'}</span>\n          <p>No fonts found!</p>\n        </div>\n      );\n    return (\n      <main>\n        <p className={darkMode ? 'dm-white' : ''} style={{ visibility: rendering ? 'hidden' : 'visible' }}>\nViewing\n          {' '}\n          <span className={darkMode ? 'dm-white' : ''}>{fontCards.length}</span>\n          {' '}\nof\n          {' '}\n          {fonts.length}\n          {' '}\nfont families\n        </p>\n        <div className={'font-grid '.concat(grid ? 'grid' : 'list')}>\n          {mainDisplay}\n        </div>\n      </main>\n    );\n  }\n}\n\nMain.defaultProps = {\n  query: '',\n  example: '',\n  fontSize: '40',\n  darkMode: false,\n  grid: true,\n};\n\nMain.propTypes = {\n  query: PropTypes.string,\n  example: PropTypes.string,\n  fontSize: PropTypes.string,\n  darkMode: PropTypes.bool,\n  grid: PropTypes.bool,\n};\n\nexport default Main;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Header from './components/Header';\nimport Nav from './components/Nav';\nimport Main from './components/Main';\n\nconst DEFAULTS = {\n  search: '',\n  exampleText: '',\n  fontSize: '40',\n  darkMode: false,\n  grid: true,\n  navFull: false,\n};\n\n// Implement stateful App component\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = DEFAULTS;\n  }\n\n  // Add scroll event listener\n  componentDidMount() {\n    window.scrollTo(0, 0);\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  // Clean up event listeners\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  // Change major nav appearance and scroll to top button visbility on scroll\n  handleScroll = (e) => {\n    const { navTop } = this.state;\n    const scrollTop = (e.target.documentElement.scrollTop || e.target.body.scrollTop);\n    if (scrollTop >= navTop) {\n      this.setState({\n        navFull: true,\n      });\n    } else {\n      this.setState({\n        navFull: false,\n      });\n    }\n  }\n\n  // Set top of nav bar for scrolling effects\n  setNavTop = (top) => {\n    this.setState({\n      navTop: top,\n      navFull: false,\n    });\n  }\n\n  // Update search query when user types in search bar\n  handleChangeSearch = (e) => {\n    const input = e.target.value;\n    const { search } = this.state;\n    // Scroll to top if input has changed (including whitespace)\n    if (input.trim() !== search.trim()) {\n      window.scrollTo(0, 0);\n    }\n    // Update state only if user input is different from previous input\n    if (input !== search) {\n      this.setState({\n        search: input,\n      });\n    }\n  }\n\n  // Delete search query when user clicks delete button\n  handleDelete = () => {\n    this.setState({\n      search: '',\n    });\n  }\n\n  // Update example text when user types in \"Type something\" box\n  handleChangeExample = (e) => {\n    const input = e.target.value;\n    const { exampleText } = this.state;\n    // Update state only if user input is different from previous input\n    if (input !== exampleText) {\n      this.setState({\n        exampleText: input,\n      });\n    }\n  }\n\n  // Update font size on user input (slider or menu selection)\n  handleChangeFontSize = (e, newSize) => {\n    this.setState({\n      fontSize: newSize || e.target.value,\n    });\n  }\n\n  // Toggle between dark and light mode\n  handleChangeMode = (e, mode) => {\n    // Change background color of body on toggle\n    if (mode === 'dark') {\n      document.body.classList.add('dm-dark');\n    } else {\n      document.body.classList.remove('dm-dark');\n    }\n    this.setState({\n      darkMode: (mode === 'dark'),\n    });\n  }\n\n  // Toggle between grid and list layout\n  handleToggleLayout = () => {\n    const { grid } = this.state;\n    this.setState({\n      fontSize: grid ? '64' : '40',\n      grid: !grid,\n    });\n  }\n\n  // Reset to display all font cards sorted by popularity with default example text\n  handleReset = () => {\n    window.scrollTo(0, 0);\n    document.body.classList.remove('dm-dark');\n    this.setState(DEFAULTS);\n  }\n\n  // Scroll to top of page\n  handleToTop = () => {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const {\n      search, exampleText, fontSize, darkMode, grid, navFull,\n    } = this.state;\n    const defaultState = Object.keys(this.state)\n      .filter((key) => ((key === 'navTop') ? false : this.state[key] === DEFAULTS[key]))\n      .length === Object.keys(DEFAULTS).length;\n    const resetDisabled = !!defaultState;\n    return (\n      <div className=\"app\" style={{ color: darkMode ? 'white' : '' }}>\n        <header>\n          <Header darkMode={darkMode} />\n          <div className=\"nav-container\">\n            <Nav\n              query={search}\n              example={exampleText}\n              fontSize={fontSize}\n              darkMode={darkMode}\n              grid={grid}\n              resetDisabled={resetDisabled}\n              navFull={navFull}\n              setNavTop={this.setNavTop}\n              changeSearch={this.handleChangeSearch}\n              deleteQuery={this.handleDelete}\n              changeExample={this.handleChangeExample}\n              changeFontSize={this.handleChangeFontSize}\n              toggleLayout={this.handleToggleLayout}\n              changeMode={this.handleChangeMode}\n              reset={this.handleReset}\n              majorNavRef={this.majorNav}\n            />\n            <div className=\"nav-placeholder\" style={{ position: navFull ? 'relative' : '' }} />\n          </div>\n        </header>\n        <Main\n          query={search.trim()}\n          example={exampleText.trim()}\n          fontSize={fontSize}\n          darkMode={darkMode}\n          grid={grid}\n        />\n        <button type=\"button\" className=\"to-top\" onClick={this.handleToTop} style={{ visibility: navFull ? 'visible' : 'hidden', boxShadow: darkMode ? 'none' : '' }}>\n          <i className=\"fas fa-arrow-up\" />\n        </button>\n        <footer>\nCoded by Danielle Rubin\n          {' '}\n          <span style={{ color: 'black' }}>|</span>\n          {' '}\n2020\n          {' '}\n          <span style={{ color: 'black' }}>|</span>\n          {' '}\nChingu Pre-Work Project\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"#222\",\"lighterGray\":\"#b8b8b8\",\"brightAccent\":\"#ff5252\",\"paleAccent\":\"rgba(255,82,82,0.16)\"};"],"sourceRoot":""}